// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Type of Instruction
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    And(a=instruction[4], b=cInstruction, out=writeD);
    And(a=instruction[3], b=cInstruction, out=writeM);
    And(a=instruction[5], b=cInstruction, out=cInstructionADest);
    Or(a=cInstructionADest, b=aInstruction, out=writeA);

    // Input to A
    Mux16(a=aluOut, b=instruction, sel=aInstruction, out=aRegisterIn);
    ARegister(in=aRegisterIn, load=writeA, out=aRegisterOut);
    Or16(a=false, b=aRegisterOut, out[0..14]=addressM);

    // ALU
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aluIn2);
    ALU(x=dRegisterout, y=aluIn2, 
        zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=aluOut, 
        zr=zrOut, ng=ngOut);

    // Input to D
    DRegister(in=aluOut, load=writeD, out=dRegisterout);

    // Output flags
    Not(in=ngOut, out=notNegative);
    Not(in=zrOut, out=notZero);

    // Jump if ALU output is greater than zero
    And(a=notZero, b=notNegative, out=GTZ);
    And(a=GTZ, b=instruction[0], out=JGT);

    // Jump if ALU output is zero
    And(a=zrOut, b=instruction[1], out=JEQ);

    // Jump if ALU output is greater than or equal to zero
    Or(a=JGT, b=JEQ, out=JGE);

    // Jump if ALU output is less than Zero
    And(a=ngOut, b=instruction[2], out=JLT);

    // Jump if ALU output is not equal to zero
    Or(a=JGT, b=JLT, out=JNE);

    // Jump if ALU output is less than or equal to zero
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JGE, b=JLT, out=JMP);

    And(a=cInstruction, b=JMP, out=jumpFlag);

    // Decides Increment Flag
    Not(in=jumpFlag, out=incFlag);

    PC(in=aRegisterOut, load=jumpFlag, inc=incFlag, reset=reset, out[0..14]=pc);

    Or16(a=false, b=aluOut, out=outM);
}